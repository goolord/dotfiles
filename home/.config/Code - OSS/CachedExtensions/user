{"input":{"ourVersion":"1.60.2","ourProductDate":"2021-09-29T02:43:56.744Z","commit":"7f6ab5485bbc008386c4386d08766667e155244e","locale":"en","devMode":false,"absoluteFolderPath":"/home/zach/.vscode-oss/extensions","isBuiltin":false,"isUnderDevelopment":false,"translations":{},"mtime":1633624680090},"result":[{"name":"vscode-neovim","displayName":"VSCode Neovim","description":"VSCode Neovim Integration","icon":"images/icon.png","publisher":"asvetliakov","extensionKind":["ui"],"version":"0.0.82","repository":{"type":"git","url":"https://github.com/asvetliakov/vscode-neovim"},"bugs":{"url":"https://github.com/asvetliakov/vscode-neovim/issues","email":"devpieron@gmail.com"},"engines":{"vscode":"^1.54.0"},"keywords":["keybindings","vi","vim","neovim"],"categories":["Other","Keymaps"],"activationEvents":["*"],"main":"./dist/extension.js","contributes":{"configuration":{"title":"Neovim","properties":{"vscode-neovim.neovimPath":{"type":"string","default":"","title":"Neovim path","markdownDescription":"*Windows, OSX, Linux in Neovim path settings won`t work if this setting is set* Full path to Neovim executable. If you have enabled `useWSL` setting, specify the Linux path to nvim executable instead.","deprecationMessage":"This setting is deprecated. Remove this setting and use neovimExecutablePaths.win32/linux/darwin instead. If you continue to use this setting, keep in mind this setting takes precedence over neovimExecutablePaths.windows/linux/darwin and those settings won't work. If you want them to work, just remove this setting from your settings.json or make its input box in User Settings empty"},"vscode-neovim.neovimExecutablePaths.win32":{"type":"string","default":"","title":"Neovim executable path on Windows","markdownDescription":"Full path to Neovim executable that should be used by the extension if running VS Code on Windows.  \nExample:  \nC:\\tools\\neovim\\Neovim\\bin\\nvim.exe (if you installed using Chocolatey)  \nIf you want to use Windows Subsystem for Linux, enable the `useWSL` setting and set `neovimExecutablePaths.linux` instead"},"vscode-neovim.neovimExecutablePaths.darwin":{"type":"string","default":"","title":"Neovim executable path on OSX","description":"Full path to Neovim executable that should be used by the extension if running VS Code on OSX."},"vscode-neovim.neovimExecutablePaths.linux":{"type":"string","default":"","title":"Neovim executable path on Linux (and in WSL)","markdownDescription":"Full path to Neovim executable that should be used by the extension if running VS Code on Linux or WSL. If `useWSL` setting is checked, vscode-neovim will look for this path in WSL  \nExample:  \n/usr/bin/nvim"},"vscode-neovim.neovimInitPath":{"type":"string","default":"","title":"Custom init.vim path","description":"Full path to custom neovim init file, equals to startup option -u. If checked useWSL flag specify a Linux path. You can also use exists('g:vscode') in your init.vim to check if neovim is being run in vscode and share init file between neovim/vscode","deprecationMessage":"This setting is deprecated. Use neovimInitVimPaths.win32/linux/darwin instead. If you continue to use this setting, keep in mind this setting takes precedence over neovimInitVimPaths.win32/linux/darwin and those settings won't work. If you want them to work, just remove this setting from your settings.json or make its input box in User Settings empty"},"vscode-neovim.neovimInitVimPaths.win32":{"type":"string","default":"","title":"Custom init.vim path on Windows","markdownDescription":"Full path to custom neovim init.vim file on Windows, equals to startup option `-u`. If the `useWSL` setting is checked, the value of the `neovimInitVimPaths.linux` setting will be used to find the init.vim file instead. You can also use `exists('g:vscode')` in your init.vim to check if neovim is being run in vscode and share init file between neovim/vscode"},"vscode-neovim.neovimInitVimPaths.darwin":{"type":"string","default":"","title":"Custom init.vim path on OSX","markdownDescription":"Full path to custom neovim init.vim file on OSX, equals to startup option `-u`. You can also use `exists('g:vscode')` in your init.vim to check if neovim is being run in vscode and share init file between neovim/vscode"},"vscode-neovim.neovimInitVimPaths.linux":{"type":"string","default":"","title":"Custom init.vim path on Linux","markdownDescription":"Full path to custom neovim init.vim file on Linux/WSL, equals to startup option `-u`. If the `useWSL` setting is checked, this path will be used to find `init.vim` in Windows Subsystem for Linux. You can also use `exists('g:vscode')` in your init.vim to check if neovim is being run in vscode and share init file between neovim/vscode"},"vscode-neovim.neovimWidth":{"type":"number","default":1000,"title":"Neovim width","description":"Neovim viewport width. Increase if you're working with long lines and have horizontal scroll problems. Larger values will affect neovim performance"},"vscode-neovim.useCtrlKeysForNormalMode":{"type":"boolean","default":true,"description":"Use Ctrl keys in normal/visual/etc...(except insert) modes"},"vscode-neovim.useCtrlKeysForInsertMode":{"type":"boolean","default":true,"description":"Use Ctrl keys in insert mode"},"vscode-neovim.mouseSelectionStartVisualMode":{"type":"boolean","default":false,"description":"Mouse selection starts visual mode"},"vscode-neovim.useWSL":{"type":"boolean","default":false,"markdownDescription":"Use neovim installed in WSL. If you enable this setting, specify the path to the neovim executable installed in WSL `neovimExecutablePaths.linux` setting"},"vscode-neovim.revealCursorScrollLine":{"type":"boolean","default":false,"markdownDescription":"If 'true' reveals the cursor when scrolling by line and if it is outside view port"},"vscode-neovim.logPath":{"type":"string","default":"","description":"Log file path"},"vscode-neovim.logLevel":{"type":"string","default":"error","enum":["none","error","warn","debug"],"description":"Log Level"},"vscode-neovim.logOutputToConsole":{"type":"boolean","default":false,"description":"When on, print log messages to vscode developer console (not output channel!)"},"vscode-neovim.highlightGroups.ignoreHighlights":{"type":"array","title":"Ignore Highlighs Groups","description":"List of vim highlights groups to ignore","default":["SpecialKey","EndOfBuffer","TermCursor","TermCursorNC","NonText","ErrorMsg","MoreMsg","ModeMsg","LineNr","CursorLineNr","Question","StatusLine","StatusLineNC","VertSplit","Title","VisualNC","WarningMsg","WildMenu","^Diff","Sign","SignColumn","^Spell","^Pmenu","^Tab","^Cursor","ColorColumn","QuickFixLine","Whitespace","NormalNC","Normal","NormalFloat","MsgSeparator","MsgArea","^RedrawDebug","Cursor","lCursor","MatchParen","^Nvim","Operator","Delimiter","Identifier","SpecialChar","Number","Type","String","Error","Comment","Constant","Special","Statement","PreProc","Underlined","Ignore","Todo","Character","Boolean","Float","Function","Conditional","Repeat","Label","Keyword","Exception","Include","Define","Macro","PreCondit","StorageClass","Structure","Typedef","Tag","SpecialComment","Debug","Folded","FoldColumn"]},"vscode-neovim.highlightGroups.highlights":{"type":"object","title":"Highlight Groups Configuration","description":"Define colors for various VIM highlight groups. Values may be 'vim' to use colors from vim or text decoration properties object","additionalProperties":{"oneOf":[{"type":"object"},{"type":"string","const":"vim"}]},"default":{"Directory":"vim","IncSearch":{"backgroundColor":"theme.editor.findMatchBackground","borderColor":"theme.editor.findMatchBorder"},"Search":{"backgroundColor":"theme.editor.findMatchHighlightBackground","borderColor":"theme.editor.findMatchHighlightBorder"},"Visual":{"backgroundColor":"theme.editor.selectionBackground"},"Conceal":"vim","Substitute":"vim"}},"vscode-neovim.highlightGroups.unknownHighlight":{"oneOf":[{"type":"object"},{"type":"string","const":"vim"}],"title":"Unknown Highlight Groups","description":"Highlight Configuration for non defined group. Can accept 'vim' to use colors coming from vim or text decoration properties object","default":"vim"},"vscode-neovim.textDecorationsAtTop":{"type":"boolean","description":"If turned on, text decorations will appear on top of the associated text instead of behind it. Consider turning this on with the EasyMotion plugin.","default":false}}},"commands":[{"command":"vscode-neovim.send","title":"Neovim: send key"},{"command":"vscode-neovim.compositeEscape1","title":"Composite escape key 1"},{"command":"vscode-neovim.compositeEscape2","title":"Composite escape key 2"},{"command":"vscode-neovim.escape","title":"Escape key"},{"command":"vscode-neovim.commit-cmdline","title":"Neovim: Accept cmdline"},{"command":"vscode-neovim.delete-word-left-cmdline","title":"Neovim: Delete word cmdline"},{"command":"vscode-neovim.delete-all-cmdline","title":"Neovim: Delete all cmdline"},{"command":"vscode-neovim.delete-char-left-cmdline","title":"Neovim: Delete char cmdline"},{"command":"vscode-neovim.complete-selection-cmdline","title":"Neovim: Complete selection cmdline"},{"command":"vscode-neovim.history-up-cmdline","title":"Neovim: History up cmdline"},{"command":"vscode-neovim.history-down-cmdline","title":"Neovim: History down cmdline"},{"command":"vscode-neovim.ctrl-b","title":"Neovim: ctrl-b"},{"command":"vscode-neovim.ctrl-d","title":"Neovim: ctrl-d"},{"command":"vscode-neovim.ctrl-e","title":"Neovim: ctrl-e"},{"command":"vscode-neovim.ctrl-f","title":"Neovim: ctrl-f"},{"command":"vscode-neovim.ctrl-u","title":"Neovim: ctrl-u"},{"command":"vscode-neovim.ctrl-y","title":"Neovim: ctrl-y"},{"command":"vscode-neovim.shift-m","title":"Neovim: shift-m"},{"command":"vscode-neovim.shift-l","title":"Neovim: shift-l"},{"command":"vscode-neovim:shift-h","title":"Neovim: shift-h"},{"command":"vscode-neovim.ctrl-a-insert","title":"Neovim: Ctrl-a-insert"},{"command":"vscode-neovim.paste-register","title":"Neovim: Paste from register"}],"keybindings":[{"command":"vscode-neovim.send","key":"ctrl+shift+p","when":"editorTextFocus && neovim.mode == visual","args":"<C-P>"},{"command":"vscode-neovim.send","key":"shift+cmd+p","when":"editorTextFocus && neovim.mode == visual","args":"<C-P>"},{"command":"vscode-neovim.send","key":"F1","when":"editorTextFocus && neovim.mode == visual","args":"<C-P>"},{"command":"list.focusDown","key":"ctrl+n","when":"listFocus && !inputFocus"},{"command":"list.focusUp","key":"ctrl+p","when":"listFocus && !inputFocus"},{"key":"j","command":"list.focusDown","when":"listFocus && !inputFocus"},{"key":"k","command":"list.focusUp","when":"listFocus && !inputFocus"},{"key":"h","command":"list.collapse","when":"listFocus && !inputFocus"},{"key":"l","command":"list.select","when":"listFocus && !inputFocus"},{"key":"enter","command":"list.select","when":"listFocus && !inputFocus"},{"key":"g g","command":"list.focusFirst","when":"listFocus && !inputFocus"},{"key":"shift+g","command":"list.focusLast","when":"listFocus && !inputFocus"},{"key":"o","command":"list.toggleExpand","when":"listFocus && !inputFocus"},{"key":"ctrl+u","command":"list.focusPageUp","when":"listFocus && !inputFocus"},{"key":"ctrl+d","command":"list.focusPageDown","when":"listFocus && !inputFocus"},{"key":"/","command":"list.toggleKeyboardNavigation","when":"listFocus && !inputFocus && listSupportsKeyboardNavigation"},{"key":"escape","command":"list.toggleKeyboardNavigation","when":"listFocus && inputFocus && listSupportsKeyboardNavigation"},{"key":"r","command":"renameFile","when":"explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"},{"key":"d","command":"deleteFile","when":"explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"},{"key":"y","command":"filesExplorer.copy","when":"explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"},{"key":"x","command":"filesExplorer.cut","when":"explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"},{"key":"p","command":"filesExplorer.paste","when":"explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"},{"key":"v","command":"explorer.openToSide","when":"explorerViewletFocus && explorerViewletVisible && !inputFocus"},{"key":"a","command":"explorer.newFile","when":"filesExplorerFocus && !inputFocus"},{"key":"shift+a","command":"explorer.newFolder","when":"filesExplorerFocus && !inputFocus"},{"command":"showNextParameterHint","key":"ctrl+n","when":"editorTextFocus && parameterHintsMultipleSignatures && parameterHintsVisible"},{"command":"showPrevParameterHint","key":"ctrl+p","when":"editorTextFocus && parameterHintsMultipleSignatures && parameterHintsVisible"},{"key":"ctrl+n","command":"selectNextSuggestion","when":"textInputFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"},{"key":"ctrl+p","command":"selectPrevSuggestion","when":"textInputFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"},{"command":"workbench.action.quickOpenSelectNext","key":"ctrl+n","when":"inQuickOpen"},{"command":"workbench.action.quickOpenSelectPrevious","key":"ctrl+p","when":"inQuickOpen"},{"command":"vscode-neovim.escape","key":"ctrl+c","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal"},{"command":"vscode-neovim.escape","key":"ctrl+c","when":"editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert"},{"command":"vscode-neovim.escape","key":"Escape","when":"editorTextFocus && neovim.init && !markersNavigationVisible && !parameterHintsVisible && !referenceSearchVisible"},{"command":"vscode-neovim.escape","key":"ctrl+[","when":"editorTextFocus && neovim.init"},{"key":"tab","command":"togglePeekWidgetFocus","when":"inReferenceSearchEditor || referenceSearchVisible && neovim.mode == normal"},{"key":"escape","command":"closeReferenceSearch","when":"inReferenceSearchEditor && !config.editor.stablePeek && neovim.mode == normal"},{"key":"ctrl+p","command":"list.focusUp","when":"inReferenceSearchEditor && neovim.mode == normal"},{"key":"ctrl+n","command":"list.focusDown","when":"inReferenceSearchEditor && neovim.mode == normal"},{"command":"vscode-neovim.send","key":"ctrl+g","when":"neovim.mode == cmdline_normal || neovim.mode == cmdline_insert || neovim.mode == cmdline_replace","args":"<C-g>"},{"command":"vscode-neovim.send","key":"ctrl+t","when":"neovim.mode == cmdline_normal || neovim.mode == cmdline_insert || neovim.mode == cmdline_replace","args":"<C-t>"},{"command":"vscode-neovim.send","key":"ctrl+r","when":"neovim.mode == cmdline_normal || neovim.mode == cmdline_insert || neovim.mode == cmdline_replace","args":"<C-r>"},{"command":"vscode-neovim.send","key":"ctrl+l","when":"neovim.mode == cmdline_normal || neovim.mode == cmdline_insert || neovim.mode == cmdline_replace","args":"<C-l>"},{"command":"vscode-neovim.send","key":"ctrl+e","when":"neovim.mode == cmdline_normal || neovim.mode == cmdline_insert || neovim.mode == cmdline_replace","args":"<C-e>"},{"command":"vscode-neovim.history-up-cmdline","key":"up","when":"neovim.mode == cmdline_normal"},{"command":"vscode-neovim.history-up-cmdline","key":"ctrl+p","when":"neovim.mode == cmdline_normal"},{"command":"vscode-neovim.history-down-cmdline","key":"down","when":"neovim.mode == cmdline_normal"},{"command":"vscode-neovim.history-down-cmdline","key":"ctrl+n","when":"neovim.mode == cmdline_normal"},{"command":"vscode-neovim.delete-word-left-cmdline","key":"ctrl+w","when":"neovim.mode == cmdline_normal"},{"command":"vscode-neovim.delete-all-cmdline","key":"ctrl+u","when":"neovim.mode == cmdline_normal"},{"command":"vscode-neovim.delete-char-left-cmdline","key":"ctrl+h","when":"neovim.mode == cmdline_normal"},{"command":"vscode-neovim.complete-selection-cmdline","key":"tab","when":"neovim.mode == cmdline_normal"},{"command":"vscode-neovim.send","key":"backspace","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<BS>"},{"command":"vscode-neovim.send","key":"shift+backspace","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<S-BS>"},{"command":"vscode-neovim.send","key":"ctrl+backspace","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<C-BS>"},{"command":"vscode-neovim.send","key":"delete","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<Del>"},{"command":"vscode-neovim.send","key":"shift+delete","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<S-Del>"},{"command":"vscode-neovim.send","key":"ctrl+delete","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<C-Del>"},{"command":"vscode-neovim.send","key":"tab","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.mode != cmdline_normal","args":"<Tab>"},{"command":"vscode-neovim.send","key":"shift+tab","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.mode != cmdline_normal","args":"<S-Tab>"},{"command":"vscode-neovim.send","key":"down","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<Down>"},{"command":"vscode-neovim.send","key":"up","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<Up>"},{"command":"vscode-neovim.send","key":"left","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<Left>"},{"command":"vscode-neovim.send","key":"right","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<Right>"},{"command":"vscode-neovim.send","key":"ctrl+down","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<C-Down>"},{"command":"vscode-neovim.send","key":"ctrl+up","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<C-Up>"},{"command":"vscode-neovim.send","key":"ctrl+right","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<C-Right>"},{"command":"vscode-neovim.send","key":"ctrl+left","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<C-Left>"},{"command":"vscode-neovim.send","key":"shift+down","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<S-Down>"},{"command":"vscode-neovim.send","key":"shift+up","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<S-Up>"},{"command":"vscode-neovim.send","key":"shift+left","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<S-Left>"},{"command":"vscode-neovim.send","key":"shift+right","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<S-Right>"},{"command":"vscode-neovim.send","key":"home","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<Home>"},{"command":"vscode-neovim.send","key":"end","when":"editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording","args":"<End>"},{"command":"vscode-neovim.send","key":"ctrl+a","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal","args":"<C-a>"},{"command":"vscode-neovim.ctrl-b","key":"ctrl+b","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal"},{"command":"vscode-neovim.ctrl-d","key":"ctrl+d","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal"},{"command":"vscode-neovim.ctrl-e","key":"ctrl+e","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal"},{"command":"vscode-neovim.ctrl-f","key":"ctrl+f","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal"},{"command":"vscode-neovim.send","key":"ctrl+i","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal","args":"<C-i>"},{"command":"vscode-neovim.send","key":"ctrl+o","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal","args":"<C-o>"},{"command":"vscode-neovim.send","key":"ctrl+r","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal","args":"<C-r>"},{"command":"vscode-neovim.ctrl-u","key":"ctrl+u","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal"},{"command":"vscode-neovim.send","key":"ctrl+v","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal","args":"<C-v>"},{"command":"vscode-neovim.send","key":"ctrl+w","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal","args":"<C-w>"},{"command":"vscode-neovim.send","key":"ctrl+x","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal","args":"<C-x>"},{"command":"vscode-neovim.ctrl-y","key":"ctrl+y","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal"},{"command":"vscode-neovim.send","key":"ctrl+z","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal","args":"<C-z>"},{"command":"vscode-neovim.send","key":"ctrl+]","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal","args":"<C-]>"},{"command":"vscode-neovim.send","key":"ctrl+j","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal","args":"<C-j>"},{"command":"vscode-neovim.send","key":"ctrl+k","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal","args":"<C-k>"},{"command":"vscode-neovim.send","key":"ctrl+l","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal","args":"<C-l>"},{"command":"vscode-neovim.send","key":"ctrl+h","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal","args":"<C-h>"},{"command":"vscode-neovim.send","key":"ctrl+/","when":"editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal","args":"<C-/>"},{"command":"deleteAllLeft","key":"ctrl-u","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert"},{"command":"vscode-neovim.ctrl-o-insert","key":"ctrl+o","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert"},{"command":"vscode-neovim.send","key":"ctrl+u","when":"editorTextFocus && neovim.mode == insert && neovim.recording && neovim.ctrlKeysInsert","args":"<C-u>"},{"command":"deleteWordLeft","key":"ctrl+w","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert"},{"command":"vscode-neovim.send","key":"ctrl+w","when":"editorTextFocus && neovim.mode == insert && neovim.recording && neovim.ctrlKeysInsert","args":"<C-w>"},{"command":"deleteLeft","key":"ctrl+h","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert"},{"command":"vscode-neovim.send","key":"ctrl+h","when":"editorTextFocus && neovim.mode == insert && neovim.recording && neovim.ctrlKeysInsert","args":"<C-j>"},{"command":"editor.action.indentLines","key":"ctrl+t","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert"},{"command":"vscode-neovim.send","key":"ctrl+t","when":"editorTextFocus && neovim.mode == insert && neovim.recording && neovim.ctrlKeysInsert","args":"<C-t>"},{"command":"editor.action.outdentLines","key":"ctrl+d","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert"},{"command":"vscode-neovim.send","key":"ctrl+d","when":"editorTextFocus && neovim.mode == insert && neovim.recording && neovim.ctrlKeysInsert","args":"<C-d>"},{"command":"editor.action.insertLineAfter","key":"ctrl+j","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert"},{"command":"vscode-neovim.send","key":"ctrl+j","when":"editorTextFocus && neovim.mode == insert && neovim.recording && neovim.ctrlKeysInsert","args":"<C-j>"},{"command":"vscode-neovim.ctrl-a-insert","key":"ctrl+a","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert"},{"command":"vscode-neovim.send","key":"ctrl+a","when":"editorTextFocus && neovim.mode == insert && neovim.recording && neovim.ctrlKeysInsert","args":"<C-a>"},{"command":"vscode-neovim.send","key":"ctrl+r","when":"editorTextFocus && neovim.mode == insert && neovim.recording && neovim.ctrlKeysInsert","args":"<C-r>"},{"command":"vscode-neovim.paste-register","key":"ctrl+r 0","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"0"},{"command":"vscode-neovim.paste-register","key":"ctrl+r 1","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"1"},{"command":"vscode-neovim.paste-register","key":"ctrl+r 2","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"2"},{"command":"vscode-neovim.paste-register","key":"ctrl+r 3","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"3"},{"command":"vscode-neovim.paste-register","key":"ctrl+r 4","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"4"},{"command":"vscode-neovim.paste-register","key":"ctrl+r 5","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"5"},{"command":"vscode-neovim.paste-register","key":"ctrl+r 6","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"6"},{"command":"vscode-neovim.paste-register","key":"ctrl+r 7","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"7"},{"command":"vscode-neovim.paste-register","key":"ctrl+r 8","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"8"},{"command":"vscode-neovim.paste-register","key":"ctrl+r 9","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"9"},{"command":"vscode-neovim.paste-register","key":"ctrl+r shift-'","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"\""},{"command":"vscode-neovim.paste-register","key":"ctrl+r shift-5","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"%"},{"command":"vscode-neovim.paste-register","key":"ctrl+r shift-3","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"#"},{"command":"vscode-neovim.paste-register","key":"ctrl+r shift-8","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"*"},{"command":"vscode-neovim.paste-register","key":"ctrl+r shift-=","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"+"},{"command":"vscode-neovim.paste-register","key":"ctrl+r shift-;","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":":"},{"command":"vscode-neovim.paste-register","key":"ctrl+r .","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"."},{"command":"vscode-neovim.paste-register","key":"ctrl+r -","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"-"},{"command":"vscode-neovim.paste-register","key":"ctrl+r =","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"="},{"command":"vscode-neovim.paste-register","key":"ctrl+r /","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"/"},{"command":"vscode-neovim.paste-register","key":"ctrl+r a","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"a"},{"command":"vscode-neovim.paste-register","key":"ctrl+r b","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"b"},{"command":"vscode-neovim.paste-register","key":"ctrl+r c","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"c"},{"command":"vscode-neovim.paste-register","key":"ctrl+r d","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"d"},{"command":"vscode-neovim.paste-register","key":"ctrl+r e","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"e"},{"command":"vscode-neovim.paste-register","key":"ctrl+r f","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"f"},{"command":"vscode-neovim.paste-register","key":"ctrl+r g","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"g"},{"command":"vscode-neovim.paste-register","key":"ctrl+r h","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"h"},{"command":"vscode-neovim.paste-register","key":"ctrl+r i","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"i"},{"command":"vscode-neovim.paste-register","key":"ctrl+r j","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"j"},{"command":"vscode-neovim.paste-register","key":"ctrl+r k","when":"editorTextFocus && neovim.mode == insert &&& !neovim.recording & neovim.ctrlKeysInsert","args":"k"},{"command":"vscode-neovim.paste-register","key":"ctrl+r l","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"l"},{"command":"vscode-neovim.paste-register","key":"ctrl+r m","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"m"},{"command":"vscode-neovim.paste-register","key":"ctrl+r n","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"n"},{"command":"vscode-neovim.paste-register","key":"ctrl+r o","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"o"},{"command":"vscode-neovim.paste-register","key":"ctrl+r p","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"p"},{"command":"vscode-neovim.paste-register","key":"ctrl+r q","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"q"},{"command":"vscode-neovim.paste-register","key":"ctrl+r r","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"r"},{"command":"vscode-neovim.paste-register","key":"ctrl+r s","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"s"},{"command":"vscode-neovim.paste-register","key":"ctrl+r t","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"t"},{"command":"vscode-neovim.paste-register","key":"ctrl+r u","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"u"},{"command":"vscode-neovim.paste-register","key":"ctrl+r v","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"v"},{"command":"vscode-neovim.paste-register","key":"ctrl+r w","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"w"},{"command":"vscode-neovim.paste-register","key":"ctrl+r x","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"x"},{"command":"vscode-neovim.paste-register","key":"ctrl+r y","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"y"},{"command":"vscode-neovim.paste-register","key":"ctrl+r z","when":"editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert","args":"z"}]},"scripts":{"lint":"eslint --ext .ts src","test":"node ./out/test/runTest.js","pretest":"yarn run test-compile","vscode:prepublish":"webpack --mode production","webpack":"webpack --mode development","webpack-dev":"webpack --mode development --watch","test-compile":"tsc -p ./"},"devDependencies":{"@types/glob":"^7.1.3","@types/lodash-es":"^4.17.4","@types/mocha":"^8.2.1","@types/msgpack-lite":"^0.1.7","@types/node":"^14.14.35","@types/vscode":"^1.54.0","@typescript-eslint/eslint-plugin":"^4.18.0","@typescript-eslint/parser":"^4.18.0","eslint":"^7.22.0","eslint-config-prettier":"^8.1.0","eslint-plugin-import":"^2.22.1","eslint-plugin-prettier":"^3.3.1","glob":"^7.1.6","mocha":"^8.3.2","prettier":"^2.2.1","source-map-support":"^0.5.19","ts-loader":"^8.0.18","typescript":"^4.2.3","vscode-test":"^1.5.1","webpack":"^5.26.1","webpack-cli":"^4.5.0"},"dependencies":{"fast-diff":"^1.2.0","lodash-es":"^4.17.21","neovim":"^4.9.0","ts-wcwidth":"^2.0.3"},"uuid":"caf8995c-5426-4bf7-9d01-f7968ebd49bb","isUserBuiltin":false,"isBuiltin":false,"isUnderDevelopment":false,"id":"asvetliakov.vscode-neovim","identifier":{"value":"asvetliakov.vscode-neovim","_lower":"asvetliakov.vscode-neovim"},"extensionLocation":{"$mid":1,"fsPath":"/home/zach/.vscode-oss/extensions/asvetliakov.vscode-neovim-0.0.82","path":"/home/zach/.vscode-oss/extensions/asvetliakov.vscode-neovim-0.0.82","scheme":"file"}},{"name":"code-runner","displayName":"Code Runner","description":"Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran","version":"0.11.5","featureFlags":{"usingNewPythonInterpreterPathApi":true,"usingNewPythonInterpreterPathApiV2":true},"publisher":"formulahendry","icon":"images/logo.png","engines":{"vscode":"^1.56.0"},"categories":["Programming Languages","Other"],"keywords":["javascript","php","python","perl","ruby","multi-root ready"],"bugs":{"url":"https://github.com/formulahendry/vscode-code-runner/issues","email":"formulahendry@gmail.com"},"homepage":"https://github.com/formulahendry/vscode-code-runner/blob/master/README.md","repository":{"type":"git","url":"https://github.com/formulahendry/vscode-code-runner.git"},"activationEvents":["onCommand:code-runner.run","onCommand:code-runner.runCustomCommand","onCommand:code-runner.runByLanguage","onStartupFinished"],"main":"./out/src/extension","contributes":{"commands":[{"command":"code-runner.run","title":"Run Code","icon":{"light":"./images/run-light.svg","dark":"./images/run-dark.svg"}},{"command":"code-runner.runCustomCommand","title":"Run Custom Command"},{"command":"code-runner.runByLanguage","title":"Run By Language"},{"command":"code-runner.stop","title":"Stop Code Run","icon":{"light":"./images/stop-light.svg","dark":"./images/stop-dark.svg"}}],"keybindings":[{"command":"code-runner.run","key":"ctrl+alt+n"},{"command":"code-runner.runCustomCommand","key":"ctrl+alt+k"},{"command":"code-runner.runByLanguage","key":"ctrl+alt+j"},{"command":"code-runner.stop","key":"ctrl+alt+m"}],"menus":{"editor/context":[{"when":"!inOutput && config.code-runner.showRunCommandInEditorContextMenu","command":"code-runner.run","group":"navigation"},{"when":"inOutput && !config.code-runner.runInTerminal","command":"code-runner.stop","group":"stop-code-run"}],"editor/title/run":[{"when":"config.code-runner.showRunIconInEditorTitleMenu","command":"code-runner.run","group":"navigation"}],"editor/title":[{"when":"config.code-runner.showStopIconInEditorTitleMenu && code-runner.codeRunning","command":"code-runner.stop","group":"navigation"}],"explorer/context":[{"when":"!explorerResourceIsFolder && config.code-runner.showRunCommandInExplorerContextMenu","command":"code-runner.run","group":"navigation"}]},"configuration":{"type":"object","title":"Run Code configuration","properties":{"code-runner.executorMapByGlob":{"type":"object","default":{"pom.xml":"cd $dir && mvn clean package"},"description":"Set the executor by glob.","scope":"resource"},"code-runner.executorMap":{"type":"object","default":{"javascript":"node","java":"cd $dir && javac $fileName && java $fileNameWithoutExt","c":"cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","cpp":"cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","objective-c":"cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","php":"php","python":"python -u","perl":"perl","perl6":"perl6","ruby":"ruby","go":"go run","lua":"lua","groovy":"groovy","powershell":"powershell -ExecutionPolicy ByPass -File","bat":"cmd /c","shellscript":"bash","fsharp":"fsi","csharp":"scriptcs","vbscript":"cscript //Nologo","typescript":"ts-node","coffeescript":"coffee","scala":"scala","swift":"swift","julia":"julia","crystal":"crystal","ocaml":"ocaml","r":"Rscript","applescript":"osascript","clojure":"lein exec","haxe":"haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt","rust":"cd $dir && rustc $fileName && $dir$fileNameWithoutExt","racket":"racket","scheme":"csi -script","ahk":"autohotkey","autoit":"autoit3","dart":"dart","pascal":"cd $dir && fpc $fileName && $dir$fileNameWithoutExt","d":"cd $dir && dmd $fileName && $dir$fileNameWithoutExt","haskell":"runhaskell","nim":"nim compile --verbosity:0 --hints:off --run","lisp":"sbcl --script","kit":"kitc --run","v":"v run","sass":"sass --style expanded","scss":"scss --style expanded","less":"cd $dir && lessc $fileName $fileNameWithoutExt.css","FortranFreeForm":"cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","fortran-modern":"cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","fortran_fixed-form":"cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","fortran":"cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt"},"description":"Set the executor of each language.","scope":"resource"},"code-runner.executorMapByFileExtension":{"type":"object","default":{".vb":"cd $dir && vbc /nologo $fileName && $dir$fileNameWithoutExt",".vbs":"cscript //Nologo",".scala":"scala",".jl":"julia",".cr":"crystal",".ml":"ocaml",".exs":"elixir",".hx":"haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",".rkt":"racket",".scm":"csi -script",".ahk":"autohotkey",".au3":"autoit3",".kt":"cd $dir && kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar && java -jar $fileNameWithoutExt.jar",".kts":"kotlinc -script",".dart":"dart",".pas":"cd $dir && fpc $fileName && $dir$fileNameWithoutExt",".pp":"cd $dir && fpc $fileName && $dir$fileNameWithoutExt",".d":"cd $dir && dmd $fileName && $dir$fileNameWithoutExt",".hs":"runhaskell",".nim":"nim compile --verbosity:0 --hints:off --run",".csproj":"dotnet run --project",".fsproj":"dotnet run --project",".lisp":"sbcl --script",".kit":"kitc --run",".v":"v run",".vsh":"v run",".sass":"sass --style expanded",".cu":"cd $dir && nvcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt"},"description":"Set the executor of each file extension.","scope":"resource"},"code-runner.customCommand":{"type":"string","default":"echo Hello","description":"Set the custom command to run.","scope":"resource"},"code-runner.languageIdToFileExtensionMap":{"type":"object","default":{"bat":".bat","powershell":".ps1","typescript":".ts"},"description":"Set the mapping of languageId to file extension.","scope":"resource"},"code-runner.defaultLanguage":{"type":"string","default":"","description":"Set the default language to run.","scope":"resource"},"code-runner.cwd":{"type":"string","default":"","description":"Set the working directory.","scope":"resource"},"code-runner.fileDirectoryAsCwd":{"type":"boolean","default":false,"description":"Whether to use the directory of the file to be executed as the working directory.","scope":"resource"},"code-runner.clearPreviousOutput":{"type":"boolean","default":false,"description":"Whether to clear previous output before each run.","scope":"resource"},"code-runner.saveAllFilesBeforeRun":{"type":"boolean","default":false,"description":"Whether to save all files before running.","scope":"resource"},"code-runner.saveFileBeforeRun":{"type":"boolean","default":false,"description":"Whether to save the current file before running.","scope":"resource"},"code-runner.enableAppInsights":{"type":"boolean","default":true,"description":"Whether to enable AppInsights to track user telemetry data.","scope":"resource"},"code-runner.showExecutionMessage":{"type":"boolean","default":true,"description":"Whether to show extra execution message like [Running] ... and [Done] ...","scope":"resource"},"code-runner.runInTerminal":{"type":"boolean","default":false,"description":"Whether to run code in Integrated Terminal.","scope":"resource"},"code-runner.terminalRoot":{"type":"string","default":"","description":"For Windows system, replaces the Windows style drive letter in the command with a Unix style root when using a custom shell as the terminal, like Bash or Cgywin. Example: Setting this to '/mnt/' will replace 'C:\\path' with '/mnt/c/path'","scope":"resource"},"code-runner.preserveFocus":{"type":"boolean","default":true,"description":"Whether to preserve focus on code editor after code run is triggered.","scope":"resource"},"code-runner.ignoreSelection":{"type":"boolean","default":false,"description":"Whether to ignore selection to always run entire file.","scope":"resource"},"code-runner.showRunIconInEditorTitleMenu":{"type":"boolean","default":true,"description":"Whether to show 'Run Code' icon in editor title menu.","scope":"resource"},"code-runner.showStopIconInEditorTitleMenu":{"type":"boolean","default":true,"description":"Whether to show 'Stop code run' icon in the editor title menu when code is running.","scope":"resource"},"code-runner.showRunCommandInEditorContextMenu":{"type":"boolean","default":true,"description":"Whether to show 'Run Code' command in editor context menu.","scope":"resource"},"code-runner.showRunCommandInExplorerContextMenu":{"type":"boolean","default":true,"description":"Whether to show 'Run Code' command in explorer context menu.","scope":"resource"},"code-runner.temporaryFileName":{"type":"string","default":"tempCodeRunnerFile","description":"Temporary file name used in running selected code snippet. When it is set as empty, the file name will be random.","scope":"resource"},"code-runner.respectShebang":{"type":"boolean","default":true,"description":"Whether to respect Shebang to run code.","scope":"resource"}}},"languages":[{"id":"code-runner-output","mimetypes":["text/x-code-output"]}],"grammars":[{"language":"code-runner-output","scopeName":"code-runner.output","path":"./syntaxes/code-runner-output.tmLanguage"}]},"scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -watch -p ./","tslint":"tslint -t verbose src/**/*.ts"},"dependencies":{"applicationinsights":"^0.19.0","micromatch":"^4.0.2","tree-kill":"^1.2.2"},"devDependencies":{"@types/micromatch":"^3.1.0","@types/mocha":"^2.2.32","@types/node":"^6.0.40","@types/vscode":"^1.56.0","mocha":"^6.1.4","tslint":"^5.5.0","typescript":"^3.8.3"},"uuid":"a6a0c5b2-d078-4bf5-a9ee-4e37054414b3","isUserBuiltin":false,"isBuiltin":false,"isUnderDevelopment":false,"id":"formulahendry.code-runner","identifier":{"value":"formulahendry.code-runner","_lower":"formulahendry.code-runner"},"extensionLocation":{"$mid":1,"fsPath":"/home/zach/.vscode-oss/extensions/formulahendry.code-runner-0.11.5","path":"/home/zach/.vscode-oss/extensions/formulahendry.code-runner-0.11.5","scheme":"file"}},{"name":"haskell","displayName":"Haskell","description":"Haskell language support powered by the Haskell Language Server","version":"1.7.1","license":"MIT","publisher":"haskell","engines":{"vscode":"^1.52.0"},"keywords":["language","haskell","cabal","stack","lsp","multi-root ready"],"homepage":"https://github.com/haskell/vscode-haskell","repository":{"type":"git","url":"https://github.com/haskell/vscode-haskell.git"},"bugs":{"url":"https://github.com/haskell/vscode-haskell/issues"},"categories":["Programming Languages","Formatters","Linters","Other"],"icon":"images/hls-logo.png","galleryBanner":{"color":"#22172A","theme":"dark"},"activationEvents":["onLanguage:haskell","onLanguage:literate haskell"],"main":"./dist/extension","contributes":{"languages":[{"id":"haskell","aliases":["Haskell","haskell"],"extensions":[".hs"]},{"id":"literate haskell","aliases":["Literate Haskell","literate Haskell"],"extensions":[".lhs"]}],"configuration":{"type":"object","title":"Haskell","properties":{"haskell.formattingProvider":{"scope":"resource","type":"string","enum":["brittany","floskell","fourmolu","ormolu","stylish-haskell","none"],"default":"ormolu","description":"The formatter to use when formatting a document or range. Ensure the plugin is enabled."},"haskell.openDocumentationInHackage":{"scope":"resource","type":"boolean","default":true,"description":"When opening 'Documentation' for external libraries, open in hackage by default. Set to false to instead open in vscode."},"haskell.openSourceInHackage":{"scope":"resource","type":"boolean","default":true,"description":"When opening 'Source' for external libraries, open in hackage by default. Set to false to instead open in vscode."},"haskell.trace.server":{"scope":"resource","type":"string","enum":["off","messages"],"default":"off","description":"Traces the communication between VS Code and the language server."},"haskell.trace.client":{"scope":"resource","type":"string","enum":["off","error","debug"],"default":"error","description":"Sets the log level in the client side."},"haskell.logFile":{"scope":"resource","type":"string","default":"","description":"If set, redirects the logs to a file."},"haskell.releasesURL":{"scope":"resource","type":"string","default":"","description":"An optional URL to override where to check for haskell-language-server releases"},"haskell.serverExecutablePath":{"scope":"resource","type":"string","default":"","markdownDescription":"Manually set a language server executable. Can be something on the $PATH or a path to an executable itself. Works with `~,` `${HOME}` and `${workspaceFolder}`. **Deprecated scope**: This option will be set to `machine` scope in a future release, so it can be changed only globally, not per workspace."},"haskell.serverExtraArgs":{"scope":"resource","type":"string","default":"","markdownDescription":"Pass additional arguments to the language server."},"haskell.updateBehavior":{"scope":"machine","type":"string","enum":["keep-up-to-date","prompt","never-check"],"enumDescriptions":["Always download the latest available version when it is published","Prompt before upgrading to a newer version","Don't check for newer versions"],"default":"keep-up-to-date","markdownDescription":"Determine what to do when a new version of the language server is available."},"haskell.checkProject":{"scope":"resource","type":"boolean","default":true,"description":"Whether to typecheck the entire project on load. It could drive to bad perfomance in large projects."},"haskell.maxCompletions":{"scope":"resource","default":40,"type":"integer","description":"Maximum number of completions sent to the editor."},"haskell.plugin.importLens.codeActionsOn":{"scope":"resource","type":"boolean","default":true,"description":"Enables explicit imports code actions"},"haskell.plugin.importLens.codeLensOn":{"scope":"resource","type":"boolean","default":true,"description":"Enables explicit imports code lenses"},"haskell.plugin.hlint.codeActionsOn":{"scope":"resource","type":"boolean","default":true,"description":"Enables hlint code actions (apply hints)"},"haskell.plugin.hlint.diagnosticsOn":{"scope":"resource","type":"boolean","default":true,"description":"Enables hlint diagnostics"},"haskell.plugin.hlint.config.flags":{"markdownDescription":"Flags used by hlint","scope":"resource","default":[],"type":"array"},"haskell.plugin.eval.globalOn":{"scope":"resource","type":"boolean","default":true,"description":"Enables eval plugin"},"haskell.plugin.moduleName.globalOn":{"scope":"resource","type":"boolean","default":true,"description":"Enables module name plugin"},"haskell.plugin.splice.globalOn":{"scope":"resource","type":"boolean","default":true,"description":"Enables splice plugin (expand template haskell definitions)"},"haskell.plugin.haddockComments.globalOn":{"scope":"resource","type":"boolean","default":true,"description":"Enables haddock comments plugin"},"haskell.plugin.class.globalOn":{"scope":"resource","type":"boolean","default":true,"description":"Enables type class plugin"},"haskell.plugin.retrie.globalOn":{"scope":"resource","type":"boolean","default":true,"description":"Enables retrie plugin"},"haskell.plugin.tactics.globalOn":{"scope":"resource","type":"boolean","default":true,"description":"Enables Wingman (tactics) plugin"},"haskell.plugin.tactics.config.auto_gas":{"markdownDescription":"The depth of the search tree when performing \"Attempt to fill hole\". Bigger values will be able to derive more solutions, but will take exponentially more time.","scope":"resource","default":4,"type":"integer"},"haskell.plugin.tactics.config.hole_severity":{"enumDescriptions":["error","warning","info","hint","none"],"scope":"resource","description":"The severity to use when showing hole diagnostics.","enum":[1,2,3,4,null],"default":null,"type":"string"},"haskell.plugin.tactics.config.max_use_ctor_actions":{"title":"Max number of constructors","scope":"resource","type":"integer","default":5,"markdownDescription":"Maximum number of `Use constructor <x>` code actions that can appear"},"haskell.plugin.tactics.config.timeout_duration":{"markdownDescription":"The timeout for Wingman actions, in seconds","scope":"resource","default":2,"type":"integer"},"haskell.plugin.tactics.config.proofstate_styling":{"markdownDescription":"Should Wingman emit styling markup when showing metaprogram proof states?","scope":"resource","default":true,"type":"boolean"},"haskell.plugin.pragmas.codeActionsOn":{"scope":"resource","type":"boolean","default":true,"description":"Enables pragmas code actions"},"haskell.plugin.pragmas.completionOn":{"scope":"resource","type":"boolean","default":true,"description":"Enables pragmas completions"},"haskell.plugin.ghcide-completions.config.autoExtendOn":{"markdownDescription":"Extends the import list automatically when completing a out-of-scope identifier","scope":"resource","default":true,"type":"boolean"},"haskell.plugin.ghcide-completions.config.snippetsOn":{"markdownDescription":"Inserts snippets when using code completions","scope":"resource","default":true,"type":"boolean"},"haskell.plugin.ghcide-type-lenses.globalOn":{"scope":"resource","type":"boolean","default":true,"description":"Enables type lenses plugin"},"haskell.plugin.ghcide-type-lenses.config.mode":{"scope":"resource","type":"string","default":true,"description":"Control how type lenses are shown","enum":["always","exported","diagnostics"],"enumDescriptions":["Always displays type lenses of global bindings","Only display type lenses of exported global bindings","Follows error messages produced by GHC about missing signatures"]},"haskell.plugin.refineImports.globalOn":{"scope":"resource","type":"boolean","default":true,"description":"Enables refine imports plugin"}}},"commands":[{"command":"haskell.commands.importIdentifier","title":"Haskell: Import identifier","description":"Imports a function or type based on a Hoogle search"},{"command":"haskell.commands.restartServer","title":"Haskell: Restart Haskell LSP server","description":"Restart the Haskell LSP server"},{"command":"haskell.commands.startServer","title":"Haskell: Start Haskell LSP server","description":"Start the Haskell LSP server"},{"command":"haskell.commands.stopServer","title":"Haskell: Stop Haskell LSP server","description":"Stop the Haskell LSP server"}]},"scripts":{"vscode:prepublish":"webpack --mode production","compile":"webpack --mode none","watch":"webpack --mode none --watch --info-verbosity verbose","tslint":"tslint -p tsconfig.json -c tslint.json --format stylish 'src/**/*.ts'","tslint-fix":"tslint --fix -p tsconfig.json  -c tslint.json --format stylish 'src/**/*.ts'","push-tag":"git tag -a $npm_package_version -m \"Version $npm_package_version\" && git push origin $npm_package_version"},"husky":{"hooks":{"pre-commit":"pretty-quick --staged"}},"devDependencies":{"@types/cheerio":"^0.22.17","@types/js-yaml":"^3.12.3","@types/lodash-es":"^4.17.3","@types/lru-cache":"^4.1.2","@types/node":"^14.0.3","@types/request-promise-native":"^1.0.17","@types/vscode":"^1.39.0","@types/yauzl":"^2.9.1","husky":"^4.2.5","prettier":"^2.0.5","pretty-quick":"^2.0.1","set-value":">=4.0.1","ts-loader":"^6.2.2","tslint":"^5.20.1","tslint-loader":"^3.5.4","typescript":"^3.9.5","webpack":"^5.53.0","webpack-cli":"^4.8.0"},"extensionDependencies":["justusadam.language-haskell"],"dependencies":{"cheerio":"^1.0.0-rc.3","extend":">=3.0.2","js-yaml":"^3.13.1","lodash-es":"^4.17.15","lru-cache":"^4.1.5","request":"^2.88.2","request-promise-native":"^1.0.8","vscode-languageclient":"^7.0.0","yauzl":"^2.10.0"},"uuid":"aead9e6c-3483-4ce4-a09f-843e25ce696f","isUserBuiltin":false,"isBuiltin":false,"isUnderDevelopment":false,"id":"haskell.haskell","identifier":{"value":"haskell.haskell","_lower":"haskell.haskell"},"extensionLocation":{"$mid":1,"fsPath":"/home/zach/.vscode-oss/extensions/haskell.haskell-1.7.1","path":"/home/zach/.vscode-oss/extensions/haskell.haskell-1.7.1","scheme":"file"}},{"name":"gruvbox","displayName":"Gruvbox Theme","description":"Gruvbox Theme","version":"1.5.1","author":"jdinhify (https://github.com/jdinhify)","contributors":["eximus (https://github.com/3ximus)","Josh Addington (https://github.com/JoshAddington)","michaelboulton (https://github.com/michaelboulton)","Michell Stuttgart (https://github.com/mstuttgart)","sedmicha (https://github.com/sedmicha)","Layo (https://github.com/layoaster)","Maxim Tsoy (https://github.com/muodov)","Huip van den Ende (https://github.com/huipvandenende)","Christian Klaussner (https://github.com/klaussner)"],"publisher":"jdinhlife","engines":{"vscode":"^1.40.1"},"categories":["Themes"],"icon":"images/icon.png","galleryBanner":{"color":"#3c3836","theme":"dark"},"homepage":"https://github.com/jdinhify/vscode-theme-gruvbox","repository":{"type":"git","url":"https://github.com/jdinhify/vscode-theme-gruvbox.git"},"contributes":{"themes":[{"label":"Gruvbox Dark Medium","uiTheme":"vs-dark","path":"./themes/gruvbox-dark-medium.json"},{"label":"Gruvbox Dark Hard","uiTheme":"vs-dark","path":"./themes/gruvbox-dark-hard.json"},{"label":"Gruvbox Dark Soft","uiTheme":"vs-dark","path":"./themes/gruvbox-dark-soft.json"},{"label":"Gruvbox Light Medium","uiTheme":"vs","path":"./themes/gruvbox-light-medium.json"},{"label":"Gruvbox Light Hard","uiTheme":"vs","path":"./themes/gruvbox-light-hard.json"},{"label":"Gruvbox Light Soft","uiTheme":"vs","path":"./themes/gruvbox-light-soft.json"}]},"devDependencies":{"@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","ovsx":"^0.1.0","semantic-release":"^17.4.2","vsce":"^1.87.1"},"private":true,"scripts":{"semantic-release":"semantic-release"},"license":"MIT","uuid":"c6d564c4-ca8c-45ba-abf6-c85f2d1468d8","isUserBuiltin":false,"isBuiltin":false,"isUnderDevelopment":false,"id":"jdinhlife.gruvbox","identifier":{"value":"jdinhlife.gruvbox","_lower":"jdinhlife.gruvbox"},"extensionLocation":{"$mid":1,"fsPath":"/home/zach/.vscode-oss/extensions/jdinhlife.gruvbox-1.5.1","path":"/home/zach/.vscode-oss/extensions/jdinhlife.gruvbox-1.5.1","scheme":"file"}},{"name":"language-haskell","displayName":"Haskell Syntax Highlighting","description":"Syntax support for the Haskell programming language.","version":"3.4.0","publisher":"justusadam","engines":{"vscode":"^1.0.0"},"icon":"images/logo.png","galleryBanner":{"color":"#293845","theme":"dark"},"files":["src/*","syntaxes/*.json","images/","README.md","LICENSE","*-configuration.json","tsconfig.json","CHANGELOG.md"],"keywords":["language","haskell","highlight","syntax"],"license":"BSD-3-Clause","homepage":"https://github.com/JustusAdam/language-haskell","repository":{"type":"git","url":"https://github.com/JustusAdam/language-haskell.git"},"bugs":{"url":"https://github.com/JustusAdam/language-haskell/issues","email":"dev@justus.science"},"categories":["Programming Languages"],"activationEvents":["onLanguage:haskell"],"main":"./out/src/extension","contributes":{"configuration":{"type":"object","title":"Haskell configuration","properties":{"haskell.indentationRules.enabled":{"type":"boolean","default":true,"description":"Set to 'false' to disable automatically increasing indent on newlines after '=', 'do', 'where' etc."}}},"languages":[{"id":"haskell","aliases":["Haskell","haskell"],"extensions":[".hsig","hs-boot",".hs"],"configuration":"./haskell-configuration.json"},{"id":"cabal","aliases":["Cabal","cabal"],"extensions":[".cabal"],"configuration":"./cabal-configuration.json"},{"id":"C2Hs","aliases":["C2Hs","c2hs"],"extensions":[".chs"],"configuration":"./C2Hs-configuration.json"},{"id":"Hsc2Hs","aliases":["Hsc2Hs","HsC2Hs","hsc2hs"],"extensions":[".hsc"],"configuration":"./Hsc2Hs-configuration.json"},{"id":"literate haskell","aliases":["Literate Haskell","literate Haskell"],"extensions":[".lhs"],"configuration":"./literate-haskell-configuration.json"},{"id":"yaml","aliases":["YAML","yaml"],"filenames":["stack.yaml.lock"]}],"grammars":[{"language":"haskell","scopeName":"source.haskell","path":"./syntaxes/haskell.json"},{"language":"cabal","scopeName":"source.cabal","path":"./syntaxes/cabal.json"},{"language":"C2Hs","scopeName":"source.c2hs","path":"./syntaxes/C2Hs.json"},{"language":"Hsc2Hs","scopeName":"source.hsc","path":"./syntaxes/Hsc2Hs.json"},{"language":"literate haskell","scopeName":"text.tex.latex.haskell","path":"./syntaxes/literateHaskell.json"},{"scopeName":"markdown.haskell.codeblock","path":"./syntaxes/codeblock-haskell.json","injectTo":["text.html.markdown"],"embeddedLanguages":{"meta.embedded.block.haskell":"haskell"}},{"scopeName":"markdown.lhaskell.codeblock","path":"./syntaxes/codeblock-literate-haskell.json","injectTo":["text.html.markdown"],"embeddedLanguages":{"meta.embedded.block.lhaskell":"lhaskell"}},{"scopeName":"markdown.cabal.codeblock","path":"./syntaxes/codeblock-cabal.json","injectTo":["text.html.markdown"],"embeddedLanguages":{"meta.embedded.block.cabal":"cabal"}}]},"scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -p ./","postinstall":"node ./node_modules/vscode/bin/install"},"devDependencies":{"js-yaml":"^3.13.1","npm":"^6.14.5","typescript":"^2.6.2","vsce":"^1.75.0","vscode":"^1.0.0"},"uuid":"270c1d3b-a657-446f-83b8-ab32fd7af006","isUserBuiltin":false,"isBuiltin":false,"isUnderDevelopment":false,"id":"justusadam.language-haskell","identifier":{"value":"justusadam.language-haskell","_lower":"justusadam.language-haskell"},"extensionLocation":{"$mid":1,"fsPath":"/home/zach/.vscode-oss/extensions/justusadam.language-haskell-3.4.0","path":"/home/zach/.vscode-oss/extensions/justusadam.language-haskell-3.4.0","scheme":"file"}},{"publisher":"TabNine","name":"tabnine-vscode","version":"3.4.29","displayName":"Tabnine - Code Faster with the All-Language AI Assistant for Code Completion, autocomplete JavaScript, Python, TypeScript, PHP, Go, Java, node.js, Ruby, C/C++, HTML/CSS, C#, Rust, SQL, Bash, Kotlin, React, Swift, Scala, Sass, Perl, Objective C, Node JS, Matlab, Haskell, Dart, Angular","description":"👩‍💻🤖 JavaScript, Python, Java, Typescript & all other languages - AI Code completion plugin. Tabnine makes developers more productive by auto-completing their code.","icon":"small_logo.png","author":"Tabnine <support@tabnine.com> (https://tabnine.com/)","license":"License at https://tabnine.com/eula","galleryBanner":{"color":"#100f11","theme":"dark"},"badges":[{"url":"https://img.shields.io/github/stars/codota/Tabnine?style=social","description":"Star Tabnine on Github","href":"https://bit.ly/36iGtUU"},{"url":"https://img.shields.io/twitter/follow/Tabnine_?style=social","description":"Follow Tabnine on Twitter","href":"https://bit.ly/2WHsEtD"},{"url":"https://img.shields.io/visual-studio-marketplace/r/TabNine.tabnine-vscode?logo=visual-studio-code&style=social","description":"Rate us in VSCode Marketplace","href":"https://bit.ly/3pqj7o2"},{"url":"https://img.shields.io/youtube/views/TKLkXh_c-Gw?style=social","description":"Watch Tabnine demo video","href":"https://bit.ly/36slY7c"}],"homepage":"https://tabnine.com","repository":{"type":"git","url":"https://github.com/codota/tabnine-vscode"},"bugs":{"url":"https://github.com/codota/tabnine-vscode/issues","email":"support@tabnine.com"},"engines":{"vscode":"^1.50.0","node":">=12.0.10"},"categories":["Programming Languages","Snippets","Other"],"keywords":["javascript","python","typescript","php","autocomplete","ruby","java","go","golang","bash","kotlin","html","css","ocaml","perl","rust","julia","lua","haskell","c","cpp","c++","csharp","c#","react","swift","objective-c","objectivec","ai","method completion","intellicode","intellisense","snippets","kite","nodejs","node","node.js","jupyter"],"activationEvents":["*"],"main":"./out/extension","scripts":{"analyze:bundle":"webpack --env analyzeBundle","vscode:prepublish":"yarn --frozen-lockfile && yarn clear-out && webpack --mode production","compile":"webpack --mode development --watch","build":"webpack --mode development","test:copyassets":"ncp ./src/test/fixture ./out/test/fixture/","prettier":"prettier --write src/","prettier:check":"prettier --check src/","lint":"eslint . --max-warnings 0","lint:fix":"eslint . --fix","test":"yarn clear-out && tsc && yarn test:copyassets && node ./out/test/runTest.js","vsce:package":"vsce package","vsce:publish":"vsce publish","ovsx:publish":"ovsx publish","teamcity:test":"tsc && node ./out/test/runTest.js","clear-out":"rimraf ./out"},"peerDependencies":{"vscode":"^1.1.37"},"devDependencies":{"@types/chai":"^4.2.14","@types/glob":"^7.1.3","@types/mocha":"^8.2.2","@types/mock-fs":"^4.13.0","@types/ncp":"^2.0.4","@types/node":"^12.0.10","@types/rimraf":"^3.0.0","@types/semver":"^7.3.4","@types/sinon":"^9.0.11","@types/tmp":"^0.2.0","@types/vscode":"^1.50.0","@types/yauzl":"^2.9.1","@typescript-eslint/eslint-plugin":"^4.21.0","@typescript-eslint/parser":"^4.18.0","assert":"^2.0.0","chai":"^4.2.0","chai-shallow-deep-equal":"^1.4.6","deep-object-diff":"^1.1.0","eslint":"^7.32.0","eslint-config-airbnb-typescript":"^12.3.1","eslint-config-prettier":"^8.2.0","eslint-import-resolver-typescript":"^2.4.0","eslint-plugin-import":"^2.22.1","glob":"^7.1.6","husky":"^5.1.2","lint-staged":"^10.5.4","mocha":"^8.3.2","mocha-teamcity-reporter":"^3.0.0","mock-fs":"^4.13.0","ncp":"^2.0.0","ovsx":"0.2","prettier":"2.2.1","rimraf":"^3.0.2","sinon":"^10.0.0","terser-webpack-plugin":"^5.1.1","ts-loader":"^9.0.0","ts-mockito":"^2.6.1","typescript":"^4.2.2","vsce":"^1.93.0","vscode-test":"^1.5.2","webpack":"^5.33.2","webpack-bundle-analyzer":"^4.4.0","webpack-cli":"^4.6.0"},"dependencies":{"await-semaphore":"^0.1.3","extract-zip":"^2.0.1","https-proxy-agent":"^5.0.0","semver":"^7.3.2","systeminformation":"^5.6.10","tmp":"^0.2.1","vscode-extension-telemetry":"^0.1.7"},"capabilities":{"virtualWorkspaces":true,"untrustedWorkspaces":{"supported":true}},"contributes":{"viewsContainers":{"activitybar":[{"id":"tabnine-access","title":"Tabnine Quick Access","icon":"small_logo.png"}]},"views":{"tabnine-access":[{"id":"tabnine-home","name":"Tabnine","when":"tabnine.tabnine-navigation-ready"}]},"languages":[{"id":"python","aliases":["Python","py","python"]},{"id":"javascript","aliases":["JavaScript","Javascript","js","javascript"]},{"id":"java","aliases":["java","Java"]},{"id":"cpp","aliases":["cpp","c++","C++"]},{"id":"c","aliases":["c","C"]},{"id":"php","aliases":["php","PHP","Php"]},{"id":"go","aliases":["go","Go","golang","Golang"]},{"id":"csharp","aliases":["csharp","Csharp","CSharp","cs","c#","C#"]},{"id":"ruby","aliases":["ruby","rb","Ruby"]},{"id":"objective-c","aliases":["objective-c","m","objectivec","Objective-C"]},{"id":"rust","aliases":["Rust","rs","rust"]},{"id":"swift","aliases":["Swift","swift"]},{"id":"typescript","aliases":["typescript","Typescript","TypeScript","ts"]},{"id":"haskell","aliases":["Haskell","hs","haskell"]},{"id":"julia","aliases":["Julia","jl","julia"]},{"id":"ocaml","aliases":["ocaml","ml","OCaml"]},{"id":"scala","aliases":["scala","Scala"]},{"id":"kotlin","aliases":["kotlin","kt","Kotlin"]},{"id":"perl","aliases":["perl","pl","Perl"]},{"id":"sql","aliases":["sql","SQL"]},{"id":"html","aliases":["Html","HTML","html"]},{"id":"css","aliases":["CSS","css"]},{"id":"less","aliases":["less","Less"]},{"id":"scss","aliases":["scss"]},{"id":"shellscript","aliases":["bash","Bash","sh","shell","shellscript","Shellscript"]},{"id":"lua","aliases":["Lua"]},{"id":"javascriptreact","aliases":["react","React","reactjs"]},{"id":"typescriptreact"}],"commands":[{"command":"TabNine::config","title":"Tabnine: Open Settings"},{"command":"TabNine::validatorClearCache","title":"Tabnine: Clear Validator Cache"},{"command":"TabNine::validatorSetThreshold","title":"Tabnine: Set Validator Threshold"},{"command":"TabNine::validatorToggle","title":"Tabnine: Toggle Validator"}],"menus":{"commandPalette":[{"command":"TabNine::validatorClearCache","when":"tabnine-validator:enabled && tabnine-validator:background"},{"command":"TabNine::validatorSetThreshold","when":"tabnine-validator:enabled && tabnine-validator:background"},{"command":"TabNine::validatorToggle","when":"tabnine-validator:capability"}]},"configuration":[{"title":"Tabnine","properties":{"tabnine.disable_line_regex":{"type":"array","default":[],"description":"Disable Tabnine when the current line contains a match of any of the provided regexes. For example, add \"require\" to disable Tabnine when the current line contains the word 'require'."},"tabnine.disable_file_regex":{"type":"array","default":[],"description":"Disable Tabnine when the file path contains a match of any of the provided regexes. For example, add \"[.]js$\" to disable Tabnine in JavaScript files."},"tabnine.experimentalAutoImports":{"type":["boolean",null,"number"],"default":null,"description":"Experimental: Enable modules auto-import following applying Tabnine suggestions"},"tabnine.logFilePath":{"type":"string","description":"Tabnine's log file (Visual Studio Code must be restarted for this setting to take effect)"},"tabnine.receiveBetaChannelUpdates":{"type":"boolean","default":false,"description":"Receive Tabnine VSCode extention beta updates"}}}],"keybindings":[{"key":"tab","command":"tabnine.accept-inline-suggestion","when":"tabnine.snippet-suggestion:enabled && tabnine.in-inline-suggestions || tabnine.inline-suggestion:enabled && tabnine.in-inline-suggestions"},{"key":"escape","command":"tabnine.escape-inline-suggestion","when":"tabnine.snippet-suggestion:enabled && tabnine.in-inline-suggestions || tabnine.inline-suggestion:enabled && tabnine.in-inline-suggestions"},{"key":"ctrl+z","command":"tabnine.escape-inline-suggestion","when":"tabnine.snippet-suggestion:enabled && tabnine.in-inline-suggestions || tabnine.inline-suggestion:enabled && tabnine.in-inline-suggestions"},{"key":"alt+]","command":"tabnine.next-inline-suggestion","when":"tabnine.snippet-suggestion:enabled && tabnine.in-inline-suggestions || tabnine.inline-suggestion:enabled && tabnine.in-inline-suggestions"},{"key":"alt+[","command":"tabnine.prev-inline-suggestion","when":"tabnine.snippet-suggestion:enabled && tabnine.in-inline-suggestions || tabnine.inline-suggestion:enabled && tabnine.in-inline-suggestions"},{"key":"alt+.","mac":"ctrl+.","command":"tabnine.snippet-suggestion","when":"tabnine.snippet-suggestion:enabled"}]},"husky":{"hooks":{"pre-commit":"lint-staged"}},"lint-staged":{"*.{ts,js,css,md}":"prettier --write src/"},"uuid":"75da638c-c45a-44ea-aa3b-8570a3559810","isUserBuiltin":false,"isBuiltin":false,"isUnderDevelopment":false,"id":"TabNine.tabnine-vscode","identifier":{"value":"TabNine.tabnine-vscode","_lower":"tabnine.tabnine-vscode"},"extensionLocation":{"$mid":1,"fsPath":"/home/zach/.vscode-oss/extensions/tabnine.tabnine-vscode-3.4.29","path":"/home/zach/.vscode-oss/extensions/tabnine.tabnine-vscode-3.4.29","scheme":"file"}}]}